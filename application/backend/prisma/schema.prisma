// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String?
  imageUrl        String?      // URL to an image stored on Amazon S3
  password        String
  role            Role     @default(USER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Token           Token[]
  dob          DateTime
  phone_number String?
  gender       String
  username     String   @unique
  reviews      Review[]
  teams           Team[]   // Added
  sportLevels     SportLevel[]  // Added
  teamLists       TeamList[]    // Added
  admins          Admin[]       // Added opposite relation field
  organizedGames  Game[]  
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

model Review {
  id            Int      @id @default(autoincrement())
  rating               String
  description          String?
  user_id Int
  user       User  @relation(fields: [user_id], references: [id])
}

model School {
  id Int      @id @default(autoincrement())
  name      String
  location  String
  admins    Admin[]
}

model Admin {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  school_id  Int      @unique
  user       User     @relation(fields: [user_id], references: [id])
  school     School   @relation(fields: [school_id], references: [id])
  adminTeams AdminTeam[]
}

model Sport {
  id    Int      @id @default(autoincrement())
  name        String
  description String?
  teams       Team[]
  games        Game[] 
  sportLevels SportLevel[]
}

model Region {
  id Int      @id @default(autoincrement())
  cities    City[]
}

model City {
  id   Int      @id @default(autoincrement())
  region_id Int
  region    Region   @relation(fields: [region_id], references: [id])
  game_locations GameLocation[]  // Added
}

model GameLocation {
  id Int      @id @default(autoincrement())
  city_id          Int
  name             String
  address          String
  description      String
  parking          String
  fee              String
  map_url          String
  locationLatitude  Float    // Added
  locationLongitude Float    // Added
  city             City     @relation(fields: [city_id], references: [id])
  games            Game[]   // Added
}

model Team {
  id    Int      @id @default(autoincrement())
  name       String
  sport_id   Int
  user_id    Int
  sport      Sport    @relation(fields: [sport_id], references: [id])
  owner      User @relation(fields: [user_id], references: [id])
  games      GameOnTeam[]
  adminTeams AdminTeam[]
  teamLists TeamList[]  // Added
}

model Game {
  id               Int          @id @default(autoincrement())
  date_time        DateTime
  number_of_players Int
  name             String
  sport_id         Int
  game_location_id Int
  user_id          Int
  sport            Sport        @relation(fields: [sport_id], references: [id])
  game_location    GameLocation @relation(fields: [game_location_id], references: [id])
  organizer        User         @relation(fields: [user_id], references: [id])
  teams            GameOnTeam[]
  description      String?      // Optional description of the game
  imageUrl         String?      // URL to an image stored on Amazon S3
}

model SportLevel {
  user_id   Int
  sport_id  Int
  level     String
  user      User @relation(fields: [user_id], references: [id])
  sport     Sport @relation(fields: [sport_id], references: [id])

  @@id([user_id, sport_id])
}

model AdminTeam {
  admin_id Int
  team_id  Int
  admin    Admin @relation(fields: [admin_id], references: [id])
  team     Team  @relation(fields: [team_id], references: [id])

  @@id([admin_id, team_id])
}

model TeamList {
  user_id Int
  team_id Int
  user    User @relation(fields: [user_id], references: [id])
  team    Team @relation(fields: [team_id], references: [id])

  @@id([user_id, team_id])
}

model GameOnTeam {
  id      Int    @id @default(autoincrement())
  team_id Int
  game_id Int
  team    Team   @relation(fields: [team_id], references: [id])
  game    Game   @relation(fields: [game_id], references: [id])

  @@unique([team_id, game_id])
}